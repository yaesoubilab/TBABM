#!/bin/sh           

# Print usage information
function print_usage {
  echo "Usage:"
  echo "  TBABM -h"
  echo "    Print usage information and exit"
  echo "  TBABM [options] -r rangefile -n num_runsheets"
  echo "    Run TBABM on 'num_runsheets' runsheets from 'rangefile'"
  echo
  echo "Options:"
  echo "  -b name       Name of the run"
  echo "  -e address    Email when job is finished. Implies -q"
  # echo "  -g            Graph the output"
  echo "  -i init_size  Initial size of population. Default 31000"
  echo "  -q            Run as a batch job through sbatch"
  echo "  -t num        Number of trajectories per runsheet. Default 4"
  echo "  -m num        Number of threads per process. Default 1"
  echo "  -j num        Number of jobs. Default 2"
}

# See documentation of 'getopts' or 
# https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/
# for more information about processing CLI arguments in Bash scripts
optstring=":hb:r:n:t:qe:i:gm:j:"

# Make sure at least one argument was supplied. $# is the number of arguments
# to the script.
if [[ $# -lt 1 ]]; then
  echo "Error: Too few options" 1>&2
  exit 1;
fi

RUN_NAME="DefaultRunName"
RANGEFILE=""
N_RUNSHEETS=0
N_TRAJECTORIES=4
N_THREADS=1
N_JOBS=2
N_INDIVIDUALS=31000
DO_BATCH=false
DO_EMAIL=false
DO_GRAPH=false
EMAIL_ADDR=""

RUNTBABM_OPTSTRING=""

# Put the flag being processed into the variable $opt
while getopts $optstring opt; do
  case ${opt} in
    h )
      print_usage; exit 0
      ;;
    b )
      RUN_NAME=$OPTARG; RUNTBABM_OPTSTRING+="-b $OPTARG "
      ;;
    r )
      RANGEFILE=$OPTARG; RUNTBABM_OPTSTRING+="-r $OPTARG "
      ;;
    n )
      N_RUNSHEETS=$OPTARG; RUNTBABM_OPTSTRING+="-n $OPTARG "
      ;;
    t )
      N_TRAJECTORIES=$OPTARG; RUNTBABM_OPTSTRING+="-t $OPTARG "
      ;;
    q )
      DO_BATCH=true
      # The next line is commented so that when executed via sbatch,
      # the script will not attempt to re-run itself
      # RUNTBABM_OPTSTRING+="-q "
      ;;
    e )
      DO_EMAIL=true
      EMAIL_ADDR=$OPTARG; RUNTBABM_OPTSTRING+="-e $OPTARG "
      ;;
    i )
      N_INDIVIDUALS=$OPTARG; RUNTBABM_OPTSTRING+="-i $OPTARG "
      ;;
    g )
      DO_GRAPH=false; RUNTBABM_OPTSTRING+="-g "
      ;;
    m )
      N_THREADS=$OPTARG; RUNTBABM_OPTSTRING+="-m $OPTARG "
      ;;
    j )
      N_JOBS=$OPTARG; RUNTBABM_OPTSTRING+="-j $OPTARG "
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1;
      ;;
    : )
      echo "Invalid Option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done

if [[ "$RANGEFILE" = "" ]]; then
  echo "Error: Must specify rangefile" 1>&2
  exit 1;
fi

if [[ "$N_RUNSHEETS" = 0 ]]; then
  echo "Error: Must specify # rangefiles" 1>&2
  exit 1;
fi

# Get rid of arguments that have already been processed
# shift $((OPTIND -1))
echo $BASH_SOURCE $@

if [[ "$DO_BATCH" = true ]]; then
  SBATCH_OPTSTRING=""
  SBATCH_OPTSTRING+='--time=00:30:00 '
  SBATCH_OPTSTRING+='--partition=general '
  SBATCH_OPTSTRING+="--job-name=$RUN_NAME "
  SBATCH_OPTSTRING+='--output=slurm.log '
  SBATCH_OPTSTRING+="--ntasks=$N_JOBS "
  SBATCH_OPTSTRING+="--cpus-per-task=$N_THREADS "
  SBATCH_OPTSTRING+='--mem-per-cpu=750M '

  if [[ "$DO_EMAIL" = true ]]; then
    SBATCH_OPTSTRING+='--mail-type=ALL '
    SBATCH_OPTSTRING+="--mail-user=$EMAIL_ADDR"
  fi

  which sbatch > /dev/null || \
    { (>&2 echo 'Error: sbatch was not found in $PATH; exiting');\
      exit 1; }

  # Schedule the job and exit
  sbatch $SBATCH_OPTSTRING $BASH_SOURCE $RUNTBABM_OPTSTRING
  exit $?
fi

# Load dependencies: use Lmod if in cluster environment
if module help > /dev/null 2>&1; then
  module load foss/2018b || \
    { (>&2 echo 'Loading foss/2018b failed; exiting'); exit $E_RUNERR; };
  module load parallel || \
    { (>&2 echo 'Loading parallel failed; exiting');   exit $E_RUNERR; };
fi

# Ensure that GNU parallel exists, else exit
which parallel > /dev/null || \
  { (>&2 echo '"parallel" not found in $PATH; exiting'); exit $E_RUNERR; };

# Make sure that all of the RunSheets exist
if ! seq -w $N_RUNSHEETS | parallel -X stat {}.json > /dev/null; then
  echo "Could not stat 1 or more of the runsheets; exiting";
  exit 1;
fi

srun="";
if which 'srun' > /dev/null; then
  # This specifies the options used to run srun. The "-N1 -n1" options are
  # used to allocates a single core to each task.
  srun="srun -n1 -N1 --cpus-per-task $N_THREADS --exclusive";
fi

seq -w $N_RUNSHEETS | parallel mkdir || \
  { (>&2 echo "Creation of an output directory failed; exiting"); exit 1; }

# Determine which TBABM binary will be used. Any TBABM binary in the working
# directory is chosen first. Then, if Lmod is available, an attempt is made 
# to load TBABM from there. Finally, TBABM is searched for in $PATH.
if stat TBABM > /dev/null 2>&1; then
  TBABM_BIN="./TBABM";
  echo "Binary found [dir]: ./TBABM";
else
  TBABM_BIN="TBABM"
fi

# # Check to see if Lmod exists
# elif module help > /dev/null 2>&1; then
#   module load TBABM || { (>&2 echo 'Loading TBABM from Lmod failed; exiting');\
#                     exit $E_RUNERR; };

#   which -s TBABM || \
#     { (>&2 echo 'No TBABM found in $PATH after successful Lmod load; exiting');\
#            exit $E_RUNERR; };

#   TBABM_BIN=`which TBABM`;
#   echo "Binary found [Lmod]: $(which TBABM)";

# else
#   which TBABM > /dev/null 2>&1 || \
#     { (>&2 echo 'No Lmod, TBABM in $PATH, or TBABM in ./; exiting');\
#            exit $E_RUNERR; };

#   TBABM_BIN=`which TBABM`;
#   echo "Binary found: [path]: $(which TBABM)";
# fi

# Build the string of options passed to the TBABM binary. Escape (using '') 
# variables whose values should be resolved on binary invocation.
TBABM_OPTSTRING=""
TBABM_OPTSTRING+="-t $N_TRAJECTORIES "
TBABM_OPTSTRING+="-n $N_INDIVIDUALS "
TBABM_OPTSTRING+='-p {}.json '
TBABM_OPTSTRING+='-s $RANDOM '
TBABM_OPTSTRING+='-o {}/ '
TBABM_OPTSTRING+="-m $N_THREADS "
TBABM_OPTSTRING+='-h household_structure.csv'

# Final string to use with Parallel
tbabm="$TBABM_BIN $TBABM_OPTSTRING"

# This specifies the options used to run GNU parallel:
#
#   --delay of 0.2 prevents overloading the controlling node.
#
#   -j is the number of tasks run simultaneously.
#
#   The combination of --joblog and --resume create a task log that
#   can be used to monitor progress.
#
parallel="parallel --verbose -j $N_JOBS --delay 0.2 --joblog parallel.log"

seq -w $N_RUNSHEETS | $parallel $srun $tbabm '>' {}.log '2>&1'

exit $?;
