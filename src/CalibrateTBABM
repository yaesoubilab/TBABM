#!/usr/bin/env Rscript

library(EasyCalibrator)
library(tibble)
library(stringr)
library(purrr)
library(dplyr)

#########################################################
## Real data: preprocessing functions
#########################################################
ReformatRawCalibData <- function(d) {
  vars <- setdiff(names(d), 'year')

  # Reformat each target into a tibble with a 'year' variable
  # and a 'value' variable
  tibbles <- purrr::map_at(d, vars, ~tibble::tibble(year=d$year, value=.))

  # For each target, remove entries that are NA-valued
  purrr::map(tibbles[vars], ~dplyr::filter(., !is.na(value)))
}

#########################################################
## Real data
#########################################################
calibrationData_raw <- tibble::tibble(
  year = 2002:2008,
  populationChildren = c(10427, 10531, 10637, 10743, 10850, 10959, 11068),
  populationAdults =   c(25903, 26162, 26424, 26688, 26955, 27224, 27497),
  notifiedTBChildren = c(82, 60, 66, 69, 73, 77, 69),
  notifiedTBExperiencedAdults = c(105, 119, 130, 109, 130, 126, 137),
  notifiedTBNaiveAdults = c(172, 234, 200, 224, 216, 233, 210),
  prevalenceExperiencedAdults = 100*c(0.097, NA, NA, NA, NA, NA, NA),
  prevalenceHIV = c(0.052, NA, NA, NA, NA, NA, NA),
  prevalenceInfectiousNaiveAdults = 100*c(0.0051, NA, NA, NA, NA, NA, NA),
  prevalenceInfectiousExperiencedAdults = 100*c(0.0299, NA, NA, NA, NA, NA, NA)
)

calibrationData <- ReformatRawCalibData(calibrationData_raw)

tar_prevalence_HIV <- list(type='TS',
                           model=c('hivPositive', 'populationSize'),
                           observed=calibrationData$prevalenceHIV)

targets <- list(HIVPrevalence=tar_prevalence_HIV)

#########################################################
## Error handling
#########################################################

tryInform <- function(code, message) {
  handleError <- function(c) {
    c$message <- paste0(c$message, "\n", '(', message, ')')
    stop(c)
  }

  tryCatch(code, error=handleError)
}

#########################################################
## Main loop
#########################################################

processLines <- function(popSize) {
  # Open 'stdin' as a file descriptor
  f <- tryInform({f <- file('stdin'); open(f); f},
                 "Could not open 'stdin' for reading")

  # Read one line at a time until EOF
  while(length(line <- readLines(f, n = 1)) > 0){
    
    # Each line should begin with a number, which is the folder name
    # containing the files to be calibrated
    runID <- stringr::str_extract(line, "^\\d+")

    # Try to go into this directory
    tryInform(setwd(runID),
              paste0("Could not open '", runID, "' as directory"))   

    # Try to calibrate the model whose results are in this directory
    msg        <- paste0("Error in calculating likelihood for '", runID, "'")
    likelihood <- tryInform(CalibrateTargets(targets, popSize=popSize), msg) 
    
    tryInform(setwd('..'),
              paste0("Could not exit '",runID,"' after calculating likelihood"))   

    write(paste0(line, ',', as.character(likelihood)),
          stdout())
  }
}

#########################################################
## CLI
#########################################################
main <- function(args) {
  n_args       <- length(args)
  flagged      <- args[1] == "-t" && n_args == 2

  if (!n_args %in% c(2))
    stop("Usage: CalibrateTBABM -p popsize")

  processLines(args[2])
}

main(commandArgs(trailingOnly=TRUE)) 
