#!/usr/bin/env bash

ARCHIVEERR="Error: Failed to specify archive name. Exiting"
ARCHIVE=${1?$ARCHIVEERR}

# Make sure that the archive file doesn't already exist
if [[ -a $ARCHIVE ]]; then
  echo "Error: archive file $ARCHIVE already exists. Exiting" 1>&2;
  exit 1;
fi

# Make sure that we can create a blank archive file to eventually
# put the archive into
if ! touch $ARCHIVE; then
  echo "Error: archive file $ARCHIVE could not be created. Exiting" 1>&2;
  exit 1;
fi

# The following is code that was previously used to create temporary files,
# this should be a better way to do it but for uninvestigated reasons did not
# appear to work out-of-the-box on the cluster environment.
# 
# progname=`basename $0`
# TMPFILE=`mktemp ${progname}.XXXXXX` || exit 1;

# Make a temporary file, which will hold the tarball, and make sure that 
# if the program is forced to quit, it will delete this file
# trap "{ rm -f $TMPFILE; }" EXIT
touch tmp.tar
TMPFILE="tmp.tar"
trap "{ rm -f $TMPFILE; }" EXIT

# Tar flags:
# -v verbose
# -u new entries won't be added unless they have a modification date newer
#    than that of any corresponding file. A fancy version of the -r flag
# -f output to the specified file
#
# Parallel call: 
# The 'echo' call at the end of parallel's command is to make that as soon
#   as a file is added to the archive, its name is echoed to stdout on success.
# '-j1' ensure that race conditions won't occur, and '--halt' ensures that
#   as soon as an invocation of tar fails, parallel will exit.
# '-N50' adds 50 files at a time to the tarball. This appears more efficient
#   when dealing with large numbers of files, probably because of seek times.
# 
# $FIRSTFIELD is a line of Perl code that splits the input line by the ','
#   character, and then takes the first element of the resulting array.
FIRSTFIELD='{= $_ = (split /,/, $_)[0] =}'
parallel -j1 -N100 --halt now,fail=1 \
         tar -rf "$TMPFILE" "$FIRSTFIELD" '&&' \
         printf '%b' '{}\\n' :::: - || \
  {(>&2 echo "Error: An invocation of tar failed."); exit 1;}

# Zip the tarball. Using 'gzip' is a good cross-platform way to ensure that
# the items in the tarball become the contents of the archive, rather than
# treating the tarball as an ordinary file.
# if [[ "$1" = "-z" ]]; then
# (gzip -c $TMPFILE > "$ARCHIVE" && rm -r "$TMPFILE") || \
#   {(>&2 echo "Error: Gunzipping or rm'ing the TMPFILE failed."); exit 1;}
# else
  mv "$TMPFILE" "$ARCHIVE"
# fi

# Convenient one-liners
# 
# List the contents of the archive:
#   tar -tf fname
